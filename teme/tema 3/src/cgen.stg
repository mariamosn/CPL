sequence(e) ::= "<e; separator=\"\n\">"
sequenceSpaced(e) ::= "<e; separator=\"\n\n\">"

program(data, textFuncs, textMain) ::= <<
.data
<data>

.text
<textFuncs>

main:
<textMain>
	li $v0, 10	
	syscall		#exit
>>

literal(value) ::= <<
	li $a0 <value>
>>

plus(e1, e2, dStr) ::= <<
<e1>
	sw $a0 0($sp)
	addiu $sp $sp -4
<e2>
	lw $t1 4($sp)
	add $a0 $t1 $a0
	addiu $sp $sp 4		<if(dStr)># <dStr><else><endif>
>>

uminus(e1, dStr) ::= <<
<e1>
    subu $a0, $zero, $a0		<if(dStr)># <dStr><else><endif>
>>

minus(e1, e2, dStr) ::= <<
<e1>
	sw $a0 0($sp)
	addiu $sp $sp -4
<e2>
	lw $t1 4($sp)
	sub $a0 $t1 $a0
	addiu $sp $sp 4		<if(dStr)># <dStr><else><endif>
>>

mult(e1, e2, dStr) ::= <<
<e1>
	sw $a0 0($sp)
	addiu $sp $sp -4
<e2>
	lw $t1 4($sp)
	mul $a0 $t1 $a0
	addiu $sp $sp 4		<if(dStr)># <dStr><else><endif>
>>

div(e1, e2, dStr) ::= <<
<e1>
	sw $a0 0($sp)
	addiu $sp $sp -4
<e2>
	lw $t1 4($sp)
	div $a0 $t1 $a0
	addiu $sp $sp 4		<if(dStr)># <dStr><else><endif>
>>

rel_eq(e1, e2, cnt, dStr) ::= <<
<e1>
	sw $a0 0($sp)
	addiu $sp $sp -4
<e2>
	lw $t1 4($sp)
	beq $a0 $t1 equal<cnt>
	li $a0 0
	j end<cnt>
equal<cnt>:
    li $a0 1
end<cnt>:		<if(dStr)># <dStr><else><endif>
>>

rel_l(e1, e2, cnt, dStr) ::= <<
<e1>
	sw $a0 0($sp)
	addiu $sp $sp -4
<e2>
	lw $t1 4($sp)
	blt $a0 $t1 less<cnt>
	li $a0 0
	j end<cnt>
less<cnt>:
    li $a0 1
end<cnt>:		<if(dStr)># <dStr><else><endif>
>>

rel_le(e1, e2, cnt, dStr) ::= <<
<e1>
	sw $a0 0($sp)
	addiu $sp $sp -4
<e2>
	lw $t1 4($sp)
	blt $a0 $t1 lessequal<cnt>
	li $a0 0
	j end<cnt>
lessequal<cnt>:
    li $a0 1
end<cnt>:		<if(dStr)># <dStr><else><endif>
>>

iff(cond_expr, then_expr, else_expr, cnt, dStr) ::= <<
<cond_expr>
    beqz $a0, falseB<cnt>
    <then_expr>
    j end<cnt>
falseB<cnt>:
    <else_expr>
end<cnt>:		<if(dStr)># <dStr><else><endif>

>>

param(p) ::= <<
    <p>
    sw $a0 0($sp)
    addiu $sp $sp -4
>>

call(params, f, dStr) ::= <<
    sw $fp 0($sp)
    addiu $sp $sp -4
    <sequence(params:param())>
    jal f		<if(dStr)># <dStr><else><endif>
>>

assign(name, value, dStr) ::= <<
<value>
    sw $a0 <name>		<if(dStr)># <dStr><else><endif>
>>

vardef(name, value, dStr) ::= <<
<name>: w <value>
>>

